#Import necessary libraries
from warnings import resetwarnings
import requests
import json, yaml
import os, sys, re

import glob

import traceback
import pandas as pd
import numpy as np
from alive_progress import alive_bar
from joblib.logger import PrintTime
from joblib import Parallel, delayed
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl import load_workbook
from wsconfig import wsConfig
config = wsConfig()
endpointDF = pd.DataFrame()

def checkCVEInWorkloadSecurity(df, ind, new):
    for cve in df:
        result = getRequest(cve)
    if(str(result) != "FAIL"):
        new[ind] = result

def getHeaders():
    header = {
        "api-version": config.get_version(),
        "Content-Type": "application/json",
        "api-secret-key": config.get_apikey()
    }
    return header

def getRequestData(cve):
    data = json.dumps({
        "searchCriteria": {
            "fieldName": "CVE",
            "stringTest": "equal",
            "stringValue": "%{}%".format(cve)
        }
    })
    return data

def getRequest(cve):
    try:
        if(checkCVEFormat(cve)):
            url = "https://{}/api/intrusionpreventionrules/search".format(config.get_hostname())
            header = {
                "api-version": config.get_version(),
                "Content-Type": "application/json",
                "api-secret-key": config.get_apikey()
            }
            data = json.dumps({
                "searchCriteria": {
                    "fieldName": "CVE",
                    "stringTest": "equal",
                    "stringValue": "%{}%".format(cve)
                }
            })
            response = requests.request("POST", url=url, headers=header, data=data, verify=bool(config.get_ssl()))
            if(response.status_code != 200):
                return "FAIL"
            elif(len(response.json()['intrusionPreventionRules'])>0):
                try:
                    for rule in response.json()['intrusionPreventionRules']:
                        return rule["identifier"], rule["ID"]
                except Exception as e:
                    print(f"Error al realizar la solicitud: {e}")
            else:
                return "", ""
        else:
            res="Invalid CVE Format"
            return res
    except (Exception, KeyError) as err:
        traceback.print_exc()
        print(err)

def processRuleInfo(rules):
    ruleInfo = ""
    for r in rules:
        ruleInfo += f"{r["identifier"]}"
    return ruleInfo

def checkCVEFormat(cve):
    cve_pattern=r'\s*CVE-\d{4}-\d{4,7}'
    if(bool(re.match(cve_pattern, cve))):
        return True
    return False

def createDFEndpoint():
    global endpointDF
    url=f"https://{config.get_hostname()}/api/computers?expand=computerStatus&expand=allVirtualMachineSummaries&expand=intrusionPrevention"
    response = requests.request("GET", url=url, headers=getHeaders(), data="", verify=bool(config.get_ssl())).json()
    computers = pd.json_normalize(response["computers"])
    aux = computers[['ID', 'hostName','displayName','computerStatus.agentStatus', 'intrusionPrevention.state', 'intrusionPrevention.ruleIDs']]
    df_seleccionado = aux[aux['intrusionPrevention.state'] != 'off']
    aux['intrusionPrevention.ruleIDs'] = aux['intrusionPrevention.ruleIDs'].apply(json.dumps)
    df_exploded = df_seleccionado.explode('intrusionPrevention.ruleIDs')
    df_rules = df_exploded[['ID', 'hostName', 'intrusionPrevention.ruleIDs']][df_exploded[['ID', 'hostName', 'intrusionPrevention.ruleIDs']]['intrusionPrevention.ruleIDs'].notna()]
    endpointDF = df_rules

def returnEndpointHostanme(ID):
    return endpointDF.loc[endpointDF['intrusionPrevention.ruleIDs'] == ID, 'hostName'].unique().tolist()


#Read file
def readFile():
    try:
        data  = pd.read_excel(config.get_cve_file())
        df = pd.DataFrame(data)
        createDFEndpoint()
        print("Total lines in File: ", len(df.index))
        rslt_df = df[df[config.get_fieldName()].notna() == True]
        print("Number of lines in column {} without Empty values: {}".format(config.get_fieldName(), len(rslt_df.index)))
        rslt_df['CVE ID'] = rslt_df['CVE ID'].str.split(',')
        df_expanded = rslt_df.explode('CVE ID')
        df_expanded['CVE ID'] = df_expanded['CVE ID'].str.strip()
        pattern = r'^CVE-\d{4}-\d{4,7}$'
        df_cleaned = df_expanded[df_expanded['CVE ID'].str.match(pattern)]
        df_cleaned = df_cleaned.drop_duplicates()

        with alive_bar(len(df_cleaned.index)) as bar:
            for index, row in df_cleaned.iterrows():
                value, ID_value = getRequest(row["CVE ID"])
                if value == "" or ID_value == "":
                    pass
                else:
                    #Entrypoint para Request GET
                    IDAux = returnEndpointHostanme(ID_value)
                    if(len(IDAux)>0): 
                        df_cleaned.at[index, 'Hostnames'] = ''.join(IDAux)
                    df_cleaned.at[index, 'Identifier'] = value
                bar()       
        print("At the end of the file a column 'TrendMicroInfo' was added where the result is")
        with pd.ExcelWriter('Result_File.xlsx') as writer:  
            df_cleaned.to_excel(writer, sheet_name='Hostname')
            print("Completed!, The result are in Result_File.xlsx")
            
    except TypeError as e:
        print(f"Error al intentar obtener informaci√≥n para el CVE ID: {e}")
    except Exception as err:
        traceback.print_exc()
        sys.exit("Error: "+str(err))
    

#Config Runtime Environment
def initialConfig():
    filename = "config.yaml"
    try:
        if(os.path.isfile(filename)):
            with open(filename) as file:
                doc = yaml.load(file, Loader=yaml.FullLoader)
                config.set_hostname(doc["Hostname"])
                config.set_apikey(doc["ApiKey"])
                config.set_version(doc["ApiVersion"])
                config.set_ssl(doc["VerifySSL"])
                config.set_cve_file(doc["CVEfilePath"])
                config.set_fieldName(doc["CVE_Field_Name"])
            readFile()
        else:
            print("Please provide the valid configuration file path, the file must be called config.yaml")
    except (Exception, KeyError) as err:
        traceback.print_exc()
        print("Error: Please check that the Config.yaml file is properly configured - ", err)
    
initialConfig()