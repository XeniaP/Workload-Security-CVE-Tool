#Import necessary libraries
from warnings import resetwarnings
import argparse
import requests
import re, json, csv
import sys, os, warnings

def checkCVEInWorkloadSecurity(cve, c1Url, apikey, verify):
    try:
        url = "{}/api/intrusionpreventionrules/search".format(c1Url)
        header = {
            "api-version": "v1",
            "Content-Type": "application/json",
            "api-secret-key": apikey
        }
        data = json.dumps({
            "searchCriteria": [
                {
                    "fieldName": "CVE",
                    "stringTest": "equal",
                    "stringValue": "%{}%".format(cve)
                }
            ]
        })
        response = requests.request("POST", url=url, headers=header, data=data, verify=bool(verify))
        rules = response.json()
        
        if(len(rules['intrusionPreventionRules'])>0):
            rulesDetails = ""
            for rule in rules['intrusionPreventionRules']:
                rulesDetails += "{} - {} - {} \n".format(rule['ID'], rule['name'], rule['severity'])
            return rulesDetails
    except Exception as err:
        print(err)

#Read CSV file
def readCSVFile(file, url, apikey, verify):
    with open(file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            checkEachCVEFormat(row, url, apikey, verify)

def checkEachCVEFormat(rows, url, apikey, verify):
    cve_pattern = r'CVE-\d{4}-\d{4,7}'
    pattern = re.compile(cve_pattern)
    for row in rows:
        if(len(row)>0 and bool(re.match(cve_pattern, row)) == True):
            print("Row: {}".format(row))
            #print(checkCVEInWorkloadSecurity(row, url, apikey, verify))
            #print("----------------------------------")

def initialConfig():
    filename = "credentials.json"
    try:
        #Mensajes
        print("This is a help script for querying agents in Deep Security using the API.")
        print("Automation Center for References https://cloudone.trendmicro.com/docs/workload-security/api-reference/")
        print("Â©2020 by Trend Micro Incorporated. All rights reserved.\n")
        with open(filename) as json_file:
            data = json.load(json_file)
            print(data)
            for p in data['credential']:
                url = p['Url']
                api_key = p['ApiKey']
                verify = p['VerifySSL']
                cvefile = p['CVEfile']
            readCSVFile(cvefile, url, api_key, verify)
        # Authentication
        api_version = "v1"
        sys.exit()
    except Exception as err:
        print("Error", err)
    
initialConfig()