#Import necessary libraries
from warnings import resetwarnings
import requests
import json, yaml
import os, sys, re

import traceback
import pandas as pd
import numpy as np
from alive_progress import alive_bar
from joblib.logger import PrintTime
from joblib import Parallel, delayed

from wsconfig import wsConfig
config = wsConfig()

#SearchCVE in Workload Security KnowledgeBase with API
def checkCVEInWorkloadSecurity(df, ind, new):
    cveItems = df[config.get_fieldName()][ind].split(",")
    result = Parallel(n_jobs=20)(delayed(getRequest)(cve) for cve in cveItems)
    if(str(result) != "FAIL"):
        new[ind] = result

def getRequest(cve):
    try:
        if(checkCVEFormat(cve)):
            url = "https://{}/api/intrusionpreventionrules/search".format(config.get_hostname())
            header = {
                "api-version": config.get_version(),
                "Content-Type": "application/json",
                "api-secret-key": config.get_apikey()
            }
            data = json.dumps({
                "searchCriteria": {
                    "fieldName": "CVE",
                    "stringTest": "equal",
                    "stringValue": "%{}%".format(cve)
                }
            })
            response = requests.request("POST", url=url, headers=header, data=data, verify=bool(config.get_ssl()))
            
            if(response.status_code != 200):
                return "FAIL"
            elif(len(response.json()['intrusionPreventionRules'])>0):
                rules = response.json()
                res = processRuleInfo(rules['intrusionPreventionRules'])
                return res
            else:
                return ""
        else:
            res="Invalid CVE Format"
            return res
    except (Exception, KeyError) as err:
        traceback.print_exc()
        print(err)

def processRuleInfo(rules):
    ruleInfo = ""
    for r in rules:
        ruleInfo += "{} - {}, ".format(r["ID"], r["name"])
    return ruleInfo

def checkCVEFormat(cve):
    cve_pattern=r'\s*CVE-\d{4}-\d{4,7}'
    if(bool(re.match(cve_pattern, cve))):
        return True
    return False

#Read file
def readFile():
    try:
        data  = pd.read_excel (config.get_cve_file())
        df = pd.DataFrame(data)
        print("Total lines in File: ", len(df.index))
        rslt_df = df[df[config.get_fieldName()].notna() == True]
        Type_new = pd.Series([],dtype=pd.StringDtype())
        print("Number of lines in column {} without void values: {}".format(config.get_fieldName(), len(rslt_df.index)))
        with alive_bar(len(rslt_df.index)) as bar:
            for ind in rslt_df.index:
                checkCVEInWorkloadSecurity(df,ind, Type_new)
                bar()
        df.insert(len(df.columns), "TrendMicroInfo", Type_new)
        print("At the end of the file a column 'TrendMicroInfo' was added where the result is")
        with pd.ExcelWriter('Result_File.xlsx') as writer:  
            df.to_excel(writer, sheet_name='ProcessData')
            print("Completed!, The result are in Result_File.xlsx")
    except Exception as err:
        traceback.print_exc()
        sys.exit("Error: "+str(err))

#Config Runtime Environment
def initialConfig():
    filename = "config.yaml"
    try:
        if(os.path.isfile(filename)):
            with open(filename) as file:
                doc = yaml.load(file, Loader=yaml.FullLoader)
                config.set_hostname(doc["Hostname"])
                config.set_apikey(doc["ApiKey"])
                config.set_version(doc["ApiVersion"])
                config.set_ssl(doc["VerifySSL"])
                config.set_cve_file(doc["CVEfilePath"])
                config.set_fieldName(doc["CVE_Field_Name"])
            readFile()
        else:
            print("Please provide the valid configuration file path, the file must be called config.yaml")
    except (Exception, KeyError) as err:
        traceback.print_exc()
        print("Error: Please check that the Config.yaml file is properly configured - ", err)
    
initialConfig()